// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Core.Entities;

public partial class EntityDataContext : DbContext
{
    public EntityDataContext()
    {
    }

    public EntityDataContext(DbContextOptions<EntityDataContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AccountModel> AccountModel { get; set; }

    public virtual DbSet<Account_Device_Mapping> Account_Device_Mapping { get; set; }

    public virtual DbSet<AddressModel> AddressModel { get; set; }

    public virtual DbSet<BrandModel> BrandModel { get; set; }

    public virtual DbSet<CatalogModel> CatalogModel { get; set; }

    public virtual DbSet<CatalogTypeModel> CatalogTypeModel { get; set; }

    public virtual DbSet<ChangeDataLogModel> ChangeDataLogModel { get; set; }

    public virtual DbSet<CompanyModel> CompanyModel { get; set; }

    public virtual DbSet<DimDateModel> DimDateModel { get; set; }

    public virtual DbSet<DistrictModel> DistrictModel { get; set; }

    public virtual DbSet<EmployeeModel> EmployeeModel { get; set; }

    public virtual DbSet<FileAttachmentModel> FileAttachmentModel { get; set; }

    public virtual DbSet<FunctionModel> FunctionModel { get; set; }

    public virtual DbSet<LoginLogModel> LoginLogModel { get; set; }

    public virtual DbSet<MenuModel> MenuModel { get; set; }

    public virtual DbSet<NewsCategoryModel> NewsCategoryModel { get; set; }

    public virtual DbSet<NewsModel> NewsModel { get; set; }

    public virtual DbSet<NotificationAccountMappingModel> NotificationAccountMappingModel { get; set; }

    public virtual DbSet<NotificationModel> NotificationModel { get; set; }

    public virtual DbSet<PageModel> PageModel { get; set; }

    public virtual DbSet<PagePermissionModel> PagePermissionModel { get; set; }

    public virtual DbSet<ProductAttributeModel> ProductAttributeModel { get; set; }

    public virtual DbSet<ProductCategoryModel> ProductCategoryModel { get; set; }

    public virtual DbSet<ProductModel> ProductModel { get; set; }

    public virtual DbSet<Product_Attribute_Mapping> Product_Attribute_Mapping { get; set; }

    public virtual DbSet<Product_Catalog_Mapping> Product_Catalog_Mapping { get; set; }

    public virtual DbSet<Product_Images_Mapping> Product_Images_Mapping { get; set; }

    public virtual DbSet<ProfileModel> ProfileModel { get; set; }

    public virtual DbSet<ProvinceModel> ProvinceModel { get; set; }

    public virtual DbSet<RefreshToken> RefreshToken { get; set; }

    public virtual DbSet<RolesModel> RolesModel { get; set; }

    public virtual DbSet<StockModel> StockModel { get; set; }

    public virtual DbSet<StoreModel> StoreModel { get; set; }

    public virtual DbSet<WardModel> WardModel { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=albums-tt.ddns.net;Initial Catalog=albums_db;User ID=albums_db;Password=Trungtin@30599;TrustServerCertificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AccountModel>(entity =>
        {
            entity.Property(e => e.AccountId).ValueGeneratedNever();
            entity.Property(e => e.LastName).IsFixedLength();

            entity.HasMany(d => d.Roles).WithMany(p => p.Account)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountInRoleModel",
                    r => r.HasOne<RolesModel>().WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AccountInRoleModel_RolesModel"),
                    l => l.HasOne<AccountModel>().WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AccountInRoleModel_AccountModel"),
                    j =>
                    {
                        j.HasKey("AccountId", "RolesId");
                        j.ToTable("AccountInRoleModel", "Pms");
                    });

            entity.HasMany(d => d.Store).WithMany(p => p.Account)
                .UsingEntity<Dictionary<string, object>>(
                    "AccountInStoreModel",
                    r => r.HasOne<StoreModel>().WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_StoreModel"),
                    l => l.HasOne<AccountModel>().WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_AccountModel"),
                    j =>
                    {
                        j.HasKey("AccountId", "StoreId");
                        j.ToTable("AccountInStoreModel", "Pms");
                    });
        });

        modelBuilder.Entity<AddressModel>(entity =>
        {
            entity.Property(e => e.AddressId).IsFixedLength();
        });

        modelBuilder.Entity<BrandModel>(entity =>
        {
            entity.Property(e => e.BrandId).ValueGeneratedNever();
        });

        modelBuilder.Entity<CatalogModel>(entity =>
        {
            entity.Property(e => e.CatalogId).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<ChangeDataLogModel>(entity =>
        {
            entity.HasKey(e => e.LogId).HasName("PK_ChangeDataLog");

            entity.Property(e => e.LogId).ValueGeneratedNever();
        });

        modelBuilder.Entity<CompanyModel>(entity =>
        {
            entity.Property(e => e.CompanyId).ValueGeneratedNever();
        });

        modelBuilder.Entity<DimDateModel>(entity =>
        {
            entity.Property(e => e.DateKey).ValueGeneratedNever();
            entity.Property(e => e.DayOfWeekUK).IsFixedLength();
            entity.Property(e => e.DayOfWeekUSA).IsFixedLength();
            entity.Property(e => e.FiscalMMYYYY).IsFixedLength();
            entity.Property(e => e.FiscalMonthYear).IsFixedLength();
            entity.Property(e => e.FiscalQuarter).IsFixedLength();
            entity.Property(e => e.FiscalYear).IsFixedLength();
            entity.Property(e => e.FiscalYearName).IsFixedLength();
            entity.Property(e => e.FullDateUK).IsFixedLength();
            entity.Property(e => e.FullDateUSA).IsFixedLength();
            entity.Property(e => e.MMYYYY).IsFixedLength();
            entity.Property(e => e.MonthYear).IsFixedLength();
            entity.Property(e => e.Quarter).IsFixedLength();
            entity.Property(e => e.Year).IsFixedLength();
            entity.Property(e => e.YearName).IsFixedLength();
        });

        modelBuilder.Entity<DistrictModel>(entity =>
        {
            entity.Property(e => e.DistrictId).ValueGeneratedNever();
        });

        modelBuilder.Entity<EmployeeModel>(entity =>
        {
            entity.Property(e => e.EmployeeId).ValueGeneratedNever();
            entity.Property(e => e.EmployeeCode).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<FileAttachmentModel>(entity =>
        {
            entity.Property(e => e.FileAttachmentId).ValueGeneratedNever();
        });

        modelBuilder.Entity<FunctionModel>(entity =>
        {
            entity.HasKey(e => e.FunctionId).HasName("PK_FunctionModel_1");
        });

        modelBuilder.Entity<LoginLogModel>(entity =>
        {
            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<MenuModel>(entity =>
        {
            entity.Property(e => e.MenuId).ValueGeneratedNever();
        });

        modelBuilder.Entity<NewsCategoryModel>(entity =>
        {
            entity.Property(e => e.NewsCategoryId).ValueGeneratedNever();
        });

        modelBuilder.Entity<NewsModel>(entity =>
        {
            entity.Property(e => e.NewsId).ValueGeneratedNever();

            entity.HasOne(d => d.NewsCategory).WithMany(p => p.NewsModel).HasConstraintName("FK_NewsModel_NewsCategoryModel");
        });

        modelBuilder.Entity<NotificationAccountMappingModel>(entity =>
        {
            entity.HasOne(d => d.Account).WithMany(p => p.NotificationAccountMappingModel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NotificationAccountMappingModel_AccountModel");

            entity.HasOne(d => d.Notification).WithMany(p => p.NotificationAccountMappingModel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NotificationAccountMappingModel_NotificationModel");
        });

        modelBuilder.Entity<NotificationModel>(entity =>
        {
            entity.Property(e => e.NotificationId).ValueGeneratedNever();
        });

        modelBuilder.Entity<PageModel>(entity =>
        {
            entity.Property(e => e.PageId).ValueGeneratedNever();

            entity.HasOne(d => d.Menu).WithMany(p => p.PageModel).HasConstraintName("FK_PageModel_MenuModel");

            entity.HasMany(d => d.Function).WithMany(p => p.Page)
                .UsingEntity<Dictionary<string, object>>(
                    "PageFunctionModel",
                    r => r.HasOne<FunctionModel>().WithMany()
                        .HasForeignKey("FunctionId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_PageFunctionModel_FunctionModel"),
                    l => l.HasOne<PageModel>().WithMany()
                        .HasForeignKey("PageId")
                        .HasConstraintName("FK_PageFunctionModel_PageModel"),
                    j =>
                    {
                        j.HasKey("PageId", "FunctionId");
                        j.ToTable("PageFunctionModel", "Pms");
                        j.IndexerProperty<string>("FunctionId").HasMaxLength(50);
                    });
        });

        modelBuilder.Entity<PagePermissionModel>(entity =>
        {
            entity.HasOne(d => d.Function).WithMany(p => p.PagePermissionModel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PagePermissionModel_FunctionModel");

            entity.HasOne(d => d.Page).WithMany(p => p.PagePermissionModel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PagePermissionModel_PageModel");

            entity.HasOne(d => d.Roles).WithMany(p => p.PagePermissionModel)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PagePermissionModel_RolesModel");
        });

        modelBuilder.Entity<ProductAttributeModel>(entity =>
        {
            entity.Property(e => e.ProductAttributeId).ValueGeneratedNever();
        });

        modelBuilder.Entity<ProductCategoryModel>(entity =>
        {
            entity.Property(e => e.CategoryId).ValueGeneratedNever();
        });

        modelBuilder.Entity<ProductModel>(entity =>
        {
            entity.Property(e => e.ProductId).ValueGeneratedNever();
            entity.Property(e => e.MetaTitle).IsFixedLength();

            entity.HasOne(d => d.Category).WithMany(p => p.ProductModel).HasConstraintName("FK_ProductModel_ProductCategoryModel");
        });

        modelBuilder.Entity<Product_Attribute_Mapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Product_Attribute_Mapping_1");

            entity.Property(e => e.Id).ValueGeneratedNever();
        });

        modelBuilder.Entity<Product_Catalog_Mapping>(entity =>
        {
            entity.Property(e => e.ProductTagId).ValueGeneratedNever();
        });

        modelBuilder.Entity<ProfileModel>(entity =>
        {
            entity.Property(e => e.ProfileId).ValueGeneratedNever();
            entity.Property(e => e.ProfileCode).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<ProvinceModel>(entity =>
        {
            entity.Property(e => e.ProvinceId).ValueGeneratedNever();
        });

        modelBuilder.Entity<RefreshToken>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__RefreshT__3214EC078B48ED9A");
        });

        modelBuilder.Entity<RolesModel>(entity =>
        {
            entity.HasKey(e => e.RolesId)
                .HasName("PK__RolesMod__C4B278410A3A22E7")
                .IsClustered(false);

            entity.Property(e => e.RolesId).HasDefaultValueSql("(newsequentialid())");
        });

        modelBuilder.Entity<StockModel>(entity =>
        {
            entity.Property(e => e.StockId).ValueGeneratedNever();
        });

        modelBuilder.Entity<StoreModel>(entity =>
        {
            entity.Property(e => e.StoreId).ValueGeneratedNever();

            entity.HasOne(d => d.Company).WithMany(p => p.StoreModel).HasConstraintName("FK_StoreModel_CompanyModel");
        });

        modelBuilder.Entity<WardModel>(entity =>
        {
            entity.Property(e => e.WardId).ValueGeneratedNever();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}